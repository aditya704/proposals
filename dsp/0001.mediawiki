<pre>
  DSP: 0001
  Title: Decentraland Specifications Proposal Format
  Author: Esteban Ordano <esteban@decentraland.org>
  Status: Active
  Type: Process
  Created: 2017-10-16
</pre>

=DSP: Decentraland Specifications Proposal Format=

This document describes the mechanism and policy for discussing Decentraland's ecosystem features.

==What is a DSP==

DSP stands for Decentraland's Specification Proposal. A DSP is a design document providing information to the Decentraland community, or describing a new feature for Decentraland's client or ecosystem, or its processes or environment. The DSP should provide a concise technical specification of a feature and a rationale for it.

We intend DSP to be the primary mechanisms for proposing major new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Decentraland. The DSP author is responsible for building consensus within the community and documenting dissenting opinions.

Because the DSP are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.

==DSP Types==

There are three kinds of DSP:

* A Standards Track DSP describes any new feature or change that affects most or all Decentraland implementations, such as a new way to serve content, an addition to the base LAND smart contract, different ways to interpret the content of a land parcel, or additional mechanisms to interact with in the virtual world.
* An Informational DSP describes a Decentraland design feature, challenge, issue or event; but it does not propose a new change. These can be useful to describe and log an historical event or decision taken at some point, or call for solutions to a given problematic to the community.
* A Process DSP describes a process surrounding Decentraland, or proposes a change to (or an event in) a process. Process DSP are like Standards Track DSP but apply to areas other than the Decentraland protocol itself. They may propose an implementation, but not to Decentraland's core clients or contracts; they often require community consensus; unlike Informational DSP, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in Decentraland development. Any meta-DSP is also considered a Process DSP.

==DSP Workflow==

===Decentraland Core Team===

The Decentraland Core Team is currently the team charged with the task of building the infrastructure and procedures to build the initial Decentraland experience. Most initial DSP are authored by them, and they are the main promoters of the process and the software.

===Decentraland Community Visions Program Proposals===

During the period of mid-2017, a large number of proposals on how to shape the world were issued at the open source repository [https://github.com/decentraland/proposals]. We encourage authors of these proposals to accomodate them and submit them in the format of a DSP when appropriate, given the high quality of some of those proposed features. Whenever this document refers to a "Proposal", except for this parragraph, the author intention is to refer to a DSP, not to the Community Visions Program proposals.

===Submitting a Proposal===

The DSP process begins with a new idea for Decentraland. Each potential DSP must have a champion -- someone who writes the DSP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The DSP champion (a.k.a. Author) should first attempt to ascertain whether the idea is DSP-able. Posting an issue to the [https://github.com/decentraland/proposals GitHub DSP repository] is the best way to go about this.

Once the champion has asked the Decentraland community as to whether an idea has any chance of acceptance, a draft DSP should be presented as a pull request to that repository. This gives the author a chance to flesh out the draft DSP to make it properly formatted, of high quality, and to address additional concerns about the proposal. Following a discussion, mention one of the DSP editors to review the DSP draft and accept the pull request. This draft must be written in DSP style as described below, else it will be rejected without further regard until proper formatting rules are followed.

DSP authors are responsible for collecting community feedback on both the initial idea and the DSP before submitting it for review. However, wherever possible, long open-ended discussions on chat or public forums should be avoided. Strategies to keep the discussions efficient include: setting up a channel within the chat server for the topic, having the DSP author accept private comments in the early design phases, setting up a wiki page, etc. DSP authors should use their discretion here.

It is highly recommended that a single DSP contain a single key proposal or new idea. The more focused the DSP, the more successful it tends to be. If in doubt, split your DSP into several well-focused ones.

The DSP editors assign DSP numbers and change their status. Please send all DSP-related email to the DSP editor, which is listed under [[#DSP|DSP Editors]] below. Also see [[#DSP|DSP Editor Responsibilities & Workflow]]. The DSP editor reserves the right to reject DSP proposals if they appear too unfocused or too broad.

Authors MUST NOT self assign DSP numbers, but should use an alias such as "dsd-johndoe-newavatars" which includes the author's name/nick and the DSP subject.

If the DSP editor approves, he will assign the DSP a number, label it as Standards Track, Informational, or Process, give it status "Draft", and merge it to the main branch of the DSP git repository. The DSP editor will not unreasonably deny a DSP. Reasons for denying DSP status include duplication of effort, disregard for formatting rules, being too unfocused or too broad, being technically unsound, not providing proper motivation or addressing backwards compatibility, or contrarial to the Decentraland philosophy. For a DSP to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.

The DSP author may update the Draft as necessary in the git repository. Updates to drafts may also be submitted by the author as pull requests.

Standards Track DSP consist of two parts, a design document and a reference implementation. The DSP should be reviewed and accepted before a reference implementation is begun, unless a reference implementation will aid people in studying the DSP. Standards Track DSP must include an implementation -- in the form of code, a patch, or a URL to same -- before it can be considered Final.

Once a DSP has been accepted, the reference implementation must be completed. When the reference implementation is complete and accepted by the community, the status will be changed to "Final".

A DSP can also be assigned status "Deferred". The DSP author or editor can assign the DSP this status when no progress is being made on the DSP. Once a DSP is deferred, the DSP editor can re-assign it to draft status.

A DSP can also be "Rejected". Perhaps after all is said and done it was not a good idea. It is still important to have a record of this fact.

DSP can also be superseded by a different DSP, rendering the original obsolete. This is intended for Informational DSP, where version 2 of an API can replace version 1.

The possible paths of the status of DSP are as follows:

<img src=dsd-0001/process.png></img>

Some Informational and Process DSP may also have a status of "Active" if they are never meant to be completed. E.g. DSP 1 (this DSP).

==What belongs in a successful DSP?==

Each DSP should have the following parts:

* Preamble -- RFC 822 style headers containing meta-data about the DSP, including the DSP number, a short descriptive title (limited to a maximum of 44 characters), the names, and optionally the contact info for each author, etc.

* Abstract -- a short (~200 word) description of the technical issue being addressed.

* Copyright/public domain -- Each DSP must either be explicitly labelled as placed in the public domain (see this DSP as an example) or licensed under the Open Publication License.

* Specification -- The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Decentraland client implementations (BabylonJS, Unity, JanusVR)

* Motivation -- The motivation is critical for DSP that want to change the Decentraland protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the DSP solves. DSP submissions without sufficient motivation may be rejected outright.

* Rationale -- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages.

* The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.

* Backwards Compatibility -- All DSP that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The DSP must explain how the author proposes to deal with these incompatibilities. DSP submissions without a sufficient backwards compatibility treatise may be rejected outright.

* Reference Implementation -- The reference implementation must be completed before any DSP is given status "Final", but it need not be completed before the DSP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code.

* The final implementation must include test code and documentation appropriate for the Decentraland protocol.

==DSP Formats and Templates==

DSP should be written in mediawiki or markdown format.

===DSP Header Preamble===

Each DSP must begin with an RFC 822 style header preamble. The headers must appear in the following order. Headers marked with "#" are optional and are described below. All other headers are required.

<pre>
  DSP: <DSP number>
  Title: <DSP title>
  Author: <list of authors names and optionally, email addresses>
# Discussions-To: <email address>
  Status: <Draft | Active | Accepted | Deferred | Rejected |
           Withdrawn | Final | Superseded>
  Type: <Standards Track | Informational | Process>
  Created: <date created on, in ISO 8601 (yyyy-mm-dd) format>
# Replaces: <DSP number>
# Superseded-By: <DSP number>
# Resolution: <url>
</pre>

The Author header lists the names, and optionally the email addresses of all the authors/owners of the DSP. The format of the Author header value must be

  Random J. User <address@dom.ain>

if the email address is included, and just

  Random J. User

if the address is not given.

If there are multiple authors, each should be on a separate line following RFC 2822 continuation line conventions.

Note: The Resolution header is required for Standards Track DSP only. It contains a URL that should point to an email message or other web resource where the pronouncement about the DSP is made.

While a DSP is in private discussions (usually during the initial Draft phase), a Discussions-To header will indicate a chatroom, forum thread, or URL where the DSP is being discussed. No Discussions-To header is necessary if the DSP is being discussed privately with the author, or on Decentraland's chat.

The Type header specifies the type of DSP: Standards Track, Informational, or Process.

The Created header records the date that the DSP was assigned a number, while Post-History is used to record the dates of when new versions of the DSP are posted to the Decentraland GitHub's issue tracker. Both headers should be in yyyy-mm-dd format, e.g. 2001-08-14.

DSP may have a Requires header, indicating the DSP numbers that this DSP depends on.

DSP may also have a Superseded-By header indicating that a DSP has been rendered obsolete by a later document; the value is the number of the DSP that replaces the current document. The newer DSP must have a Replaces header containing the number of the DSP that it rendered obsolete.

===Auxiliary Files===

DSP may include auxiliary files such as diagrams. Image files should be included in a subdirectory for that DSP. Auxiliary files must be named DSP-XXXX-Y.ext, where "XXXX" is the DSP number, "Y" is a serial number (starting at 1), and "ext" is replaced by the actual file extension (e.g. "png").

==Transferring DSP Ownership==

It occasionally becomes necessary to transfer ownership of DSP to a new champion. In general, we'd like to retain the original author as a co-author of the transferred DSP, but that's really up to the original author. A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the DSP process, or has fallen off the face of the 'net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the DSP. We try to build consensus around a DSP, but if that's not possible, you can always submit a competing DSP.

If you are interested in assuming ownership of a DSP, send a message asking to take over, addressed to both the original author and the DSP editor. If the original author doesn't respond to email in a timely manner, the DSP editor will make a unilateral decision (it's not like such decisions can't be reversed :).

==DSP Editors==

The current DSP editor is Esteban Ordano who can be contacted at [[mailto:dsdeditor@decentraland.org|dsdeditor@decentraland.org]].

==DSP Editor Responsibilities & Workflow==

The DSP editor wathes the DSP repository on GitHub. All DSP-related correspondence should be sent (or CC'd) to dsdeditor@decentraland.org.

For each new DSP that comes in an editor does the following:

* Read the DSP to check if it is ready: sound and complete. The ideas must make technical sense, even if they don't seem likely to be accepted.
* The title should accurately describe the content.
* Edit the DSP for language (spelling, grammar, sentence structure, etc.), markup (for reST DSP), code style.

If the DSP isn't ready, the editor will send it back to the author for revision, with specific instructions.

Once the DSP is ready for the repository it should be submitted as a "pull request" to the [https://github.com/decentraland/proposals decentraland/proposals] repository on GitHub where it may get further feedback.

The DSP editor will:

* Assign a DSP number (the next available number, or maybe some number grouped together with similar DSP, but sometimes a special/joke number, like 1337) in the pull request comments.

* Merge the pull request when the author is ready (allowing some time for further peer review).

* List the DSP in [[README.mediawiki]]

* Send email back to the DSP author with next steps.

The DSP editors are intended to fulfill administrative and editorial responsibilities. The DSP editors monitor DSP changes, and correct any structure, grammar, spelling, or markup mistakes we see.

==History==

This document is heavily based on Python's PEP 1 and Bitcoin's BIP 1.

References to similar processes:

* https://www.python.org/dev/peps/
* https://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki
* https://www.ietf.org/rfc.html

==Changelog==

October 16th, 2017: Initial version
